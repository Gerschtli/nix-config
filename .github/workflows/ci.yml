name: Build and test flake outputs
on:
  push:
  workflow_dispatch:
  workflow_call:
    inputs:
      branch:
        description: Branch name to build on
        default: ""
        required: false
        type: string
    secrets:
      CACHIX_ACTIVATE_TOKEN:
      CACHIX_AUTH_TOKEN:
        required: true

jobs:
  nix:
    runs-on: "${{ matrix.runs-on }}"

    strategy:
      fail-fast: false
      matrix:
        include:
          # - nix-command: develop .#jdk8 --profile result
          #   runs-on: ubuntu-latest
          # - nix-command: develop .#jdk11 --profile result
          #   runs-on: ubuntu-latest
          # - nix-command: develop .#jdk17 --profile result
          #   runs-on: ubuntu-latest
          # - nix-command: develop .#php74 --profile result
          #   runs-on: ubuntu-latest
          # - nix-command: develop .#php74-composer1 --profile result
          #   runs-on: ubuntu-latest
          # - nix-command: develop .#php80 --profile result
          #   runs-on: ubuntu-latest
          # - nix-command: develop .#php81 --profile result
          #   runs-on: ubuntu-latest

          - nix-command: fmt -- --check
            runs-on: macos-15
          - nix-command: fmt -- --check
            runs-on: ubuntu-24.04-arm
          - nix-command: fmt -- --check
            runs-on: ubuntu-latest

          - nix-command: eval .#apps.aarch64-darwin.nixos-shell.program
            runs-on: macos-15
          - nix-command: eval .#apps.aarch64-linux.nixos-shell.program
            runs-on: ubuntu-24.04-arm
          - nix-command: eval .#apps.x86_64-linux.nixos-shell.program
            runs-on: ubuntu-latest

          - nix-command: eval .#apps.aarch64-darwin.setup.program
            runs-on: macos-15
          - nix-command: eval .#apps.aarch64-linux.setup.program
            runs-on: ubuntu-24.04-arm
          - nix-command: eval .#apps.x86_64-linux.setup.program
            runs-on: ubuntu-latest

          - nix-command: build .#homeConfigurations."tobiashapp@bwpm-FP2CYXKY2V".activationPackage
            runs-on: macos-15
          - nix-command: build .#homeConfigurations."tobiashapp@R2026".activationPackage
            runs-on: macos-15
          - nix-command: build .#homeConfigurations."tobias@gamer".activationPackage
            runs-on: ubuntu-latest

          - nix-command: build .#nixOnDroidConfigurations.pixel7a.activationPackage --impure
            runs-on: ubuntu-24.04-arm

          - nix-command: build .#nixosConfigurations.argon.config.system.build.toplevel
            runs-on: ubuntu-24.04-arm
            deploy-agent: argon
          - nix-command: build .#nixosConfigurations.krypton.config.system.build.toplevel
            runs-on: ubuntu-latest
            deploy-agent: krypton
          - nix-command: build .#nixosConfigurations.neon.config.system.build.toplevel
            runs-on: ubuntu-latest
          - nix-command: build .#nixosConfigurations.xenon.config.system.build.toplevel
            runs-on: ubuntu-24.04-arm
            deploy-agent: xenon

          - nix-command: build .#packages.aarch64-linux.rpi-firmware
            runs-on: ubuntu-24.04-arm
          - nix-command: build .#packages.aarch64-linux.rpi-image
            runs-on: ubuntu-24.04-arm
          - nix-command: build .#packages.x86_64-linux.installer-image
            runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: matrix.runs-on != 'macos-15'
        continue-on-error: true
        with:
          tool-cache: true

      - name: Install nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            keep-going = true

      - name: Setup cachix (gerschtli)
        uses: cachix/cachix-action@v16
        with:
          name: gerschtli
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Setup cachix (nix-on-droid)
        uses: cachix/cachix-action@v16
        with:
          name: nix-on-droid
          useDaemon: false

      - name: Build command
        run: nix ${{ matrix.nix-command }}

      - name: Deploy cachix-agent spec
        if: github.ref == 'refs/heads/master' && inputs.branch == '' && matrix.deploy-agent
        env:
          CACHIX_ACTIVATE_TOKEN: ${{ secrets.CACHIX_ACTIVATE_TOKEN }}
        run: |
          echo "::group::Build spec"
          spec="$(nix build --print-out-paths ".#cachix-deploy-spec-${{ matrix.deploy-agent }}")"

          echo "::group::Upload spec"
          cachix push gerschtli "$spec"

          echo "::group::Activate deployment"
          cachix deploy activate --agent "${{ matrix.deploy-agent }}" ${{ matrix.deploy-args }} "$spec"

# vim: set sw=2:
